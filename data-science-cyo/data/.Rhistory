if(u<=abc){z[h]<-y} #acepta al candidato
if(u>abc){z[h]<-x} #rechaza al candidato
}
par(mfrow=c(1,1))
hist(z[50:length(z)],prob=T)
-(-length(ftwt)/2 *log(pi*2*sig^2)+((-1/(2*sig^2))*sum((ftwt-eps)^2))+sum(log(1+erf((alpha*(ftwt-eps)/sig+beta*(ftwt-eps)^3/sig^3))/(sig*sqrt(2)))))
## Definimos los parámetros ##
rm(list=ls())
set.seed(50000)
eps = res.L$par[1]
sig = res.L$par[2]
alpha = res.L$par[3]
beta = res.L$par[4]
## Definimos la función de interés ##
FSGN = function(x,eps, sig, alpha, beta){
2 * dnorm(x=x,mean=eps, sd=sig) * pnorm(alpha*(x-eps)/sig+beta*(x-eps)^3/sig^3,mean = 0,sd = 1)
}
## Definimos el algoritmo ##
# Valor Inicial
M=10000
z=1
# Metropolis Hastings
for(h in 2:M){
x = z[h-1]
y = rnorm(1, mean = eps,sd = sig^2*2.4)
u = runif(1)
abc= min(1,(FSGN(y,eps,sig,alpha,beta)/FSGN(x,eps,sig,alpha,beta)))
if(u<=abc){z[h]<-y} #acepta al candidato
if(u>abc){z[h]<-x} #rechaza al candidato
}
par(mfrow=c(1,1))
hist(z[50:length(z)],prob=T)
lines(density(z))
ts.plot(z)
rm(list=ls())
data("faithful")
library(pracma)
log.like = function(theta){
eps = theta[1]
sig = theta[2]
alpha = theta[3]
beta = theta[4]
ftwt = faithful$waiting
-(-length(ftwt)/2 *log(pi*2*sig^2)+((-1/(2*sig^2))*sum((ftwt-eps)^2))+sum(log(1+erf((alpha*(ftwt-eps)/sig+beta*(ftwt-eps)^3/sig^3))/(sig*sqrt(2)))))
}
hist(ftwt)
res.L = optim(c(70,20,0,0),log.like,method="L-BFGS-B")
round(res.L$par,3)
set.seed(50000)
eps = res.L$par[1]
sig = res.L$par[2]
alpha = res.L$par[3]
beta = res.L$par[4]
## Definimos la función de interés ##
FSGN = function(x,eps, sig, alpha, beta){
2 * dnorm(x=x,mean=eps, sd=sig) * pnorm(alpha*(x-eps)/sig+beta*(x-eps)^3/sig^3,mean = 0,sd = 1)
}
## Definimos el algoritmo ##
# Valor Inicial
M=10000
z=1
# Metropolis Hastings
for(h in 2:M){
x = z[h-1]
y = rnorm(1, mean = eps,sd = sig^2*2.4)
u = runif(1)
abc= min(1,(FSGN(y,eps,sig,alpha,beta)/FSGN(x,eps,sig,alpha,beta)))
if(u<=abc){z[h]<-y} #acepta al candidato
if(u>abc){z[h]<-x} #rechaza al candidato
}
par(mfrow=c(1,1))
hist(z[50:length(z)],prob=T)
ftwt = faithful$waiting
hist(z)
View(z)
# Valor Inicial
M=1000000
z=1
# Metropolis Hastings
for(h in 2:M){
x = z[h-1]
y = rnorm(1, mean = eps,sd = sig^2*2.4)
u = runif(1)
abc= min(1,(FSGN(y,eps,sig,alpha,beta)/FSGN(x,eps,sig,alpha,beta)))
if(u<=abc){z[h]<-y} #acepta al candidato
if(u>abc){z[h]<-x} #rechaza al candidato
}
par(mfrow=c(1,1))
hist(z[50:length(z)],prob=T)
library(pracma)
log.like = function(theta){
eps = theta[1]
sig = theta[2]
alpha = theta[3]
beta = theta[4]
ftwt = faithful$waiting
-(-length(ftwt)/2 *log(pi*2*sig^2)+((-1/(2*sig^2))*sum((ftwt-eps)^2))+sum(log(1+erf((alpha*(ftwt-eps)/sig+beta*(ftwt-eps)^3/sig^3))/(sig*sqrt(2)))))
}
res.L = optim(c(70,20,0,0),log.like,method="L-BFGS-B")
round(res.L$par,3)
ftwt = faithful$waiting
hist(ftwt,prob=T)
eps = 70
sig = 20
alpha = 2
beta = -2
FSGN = function(x,eps, sig, alpha, beta){
2 * dnorm(x=x,mean=eps, sd=sig) * pnorm(alpha*(x-eps)/sig+beta*(x-eps)^3/sig^3,mean = 0,sd = 1)
}
# Valor Inicial
M=10000
z=1
# Metropolis Hastings
for(h in 2:M){
x = z[h-1]
y = rnorm(1, mean = eps,sd = sig^2*2.4)
u = runif(1)
abc= min(1,(FSGN(y,eps,sig,alpha,beta)/FSGN(x,eps,sig,alpha,beta)))
if(u<=abc){z[h]<-y} #acepta al candidato
if(u>abc){z[h]<-x} #rechaza al candidato
}
par(mfrow=c(1,1))
hist(z[50:length(z)],prob=T)
lines(density(z))
data("faithful")
library(pracma)
log.like = function(theta){
eps = theta[1]
sig = theta[2]
alpha = theta[3]
beta = theta[4]
ftwt = faithful$waiting
-(-length(ftwt)/2 *log(pi*2*sig^2)+((-1/(2*sig^2))*sum((ftwt-eps)^2))+sum(log(1+erf((alpha*(ftwt-eps)/sig+beta*(ftwt-eps)^3/sig^3))/(sig*sqrt(2)))))
}
hist(ftwt,prob=T)
res.L = optim(c(70,20,0,0),log.like,method="L-BFGS-B")
round(res.L$par,3)
res.L = nlminb(c(70,20,0,0),log.like)
round(res.L$par,3)
eps = res.L$par[1]
sig = res.L$par[2]
alpha = res.L$par[3]
beta = res.L$par[4]
## Definimos la función de interés ##
FSGN = function(x,eps, sig, alpha, beta){
2 * dnorm(x=x,mean=eps, sd=sig) * pnorm(alpha*(x-eps)/sig+beta*(x-eps)^3/sig^3,mean = 0,sd = 1)
}
## Definimos el algoritmo ##
# Valor Inicial
M=10000
z=1
# Metropolis Hastings
for(h in 2:M){
x = z[h-1]
y = rnorm(1, mean = eps,sd = sig^2*2.4)
u = runif(1)
abc= min(1,(FSGN(y,eps,sig,alpha,beta)/FSGN(x,eps,sig,alpha,beta)))
if(u<=abc){z[h]<-y} #acepta al candidato
if(u>abc){z[h]<-x} #rechaza al candidato
}
par(mfrow=c(1,1))
hist(z[50:length(z)],prob=T)
## Definimos los parámetros ##
rm(list=ls())
set.seed(50000)
eps = 70
sig = 20
alpha = 2
beta = -2
## Definimos la función de interés ##
FSGN = function(x,eps, sig, alpha, beta){
2 * dnorm(x=x,mean=eps, sd=sig) * pnorm(alpha*(x-eps)/sig+beta*(x-eps)^3/sig^3,mean = 0,sd = 1)
}
## Definimos el algoritmo ##
# Valor Inicial
M=10000
z=1
# Metropolis Hastings
for(h in 2:M){
x = z[h-1]
y = rnorm(1, mean = eps,sd = sig^2*2.4)
u = runif(1)
abc= min(1,(FSGN(y,eps,sig,alpha,beta)/FSGN(x,eps,sig,alpha,beta)))
if(u<=abc){z[h]<-y} #acepta al candidato
if(u>abc){z[h]<-x} #rechaza al candidato
}
par(mfrow=c(1,1))
hist(z[50:length(z)],prob=T)
lines(density(z))
ts.plot(z)
rm(list=ls())
data("faithful")
library(pracma)
log.like = function(theta){
eps = theta[1]
sig = theta[2]
alpha = theta[3]
beta = theta[4]
ftwt = faithful$waiting
-(-length(ftwt)/2 *log(pi*2*sig^2)+((-1/(2*sig^2))*sum((ftwt-eps)^2))+sum(log(1+erf((alpha*(ftwt-eps)/sig+beta*(ftwt-eps)^3/sig^3))/(sig*sqrt(2)))))
}
hist(ftwt,prob=T)
res.L = nlminb(c(70,20,0,0),log.like)
round(res.L$par,3)
res.L = nlminb(c(70,20,0,0),log.like,hessian = T)
round(res.L$par,3)
res.L = optim(c(70,20,0,0),log.like,method = "L-BFGS-B",hessian = -T)
round(res.L$par,3)
res.L$hessian
fisher_info = solve(res.L$hessian)
fisher_info
fisher_info = solve(-res.L$hessian)
fisher_info = solve(res.L$hessian)
diag(fisher_info)
prop_sigma = sqrt(diag(fisher_info))
prop_sigma = sqrt(diag(fisher_info))
fisher_info = solve(res.L$hessian)
fisher_info = solve(res.L$hessian)
res.L$hessian
fisher_info = solve(res.L$hessian)
fisher_info
prop_sigma = sqrt(diag(fisher_info))
fisher_info = solve(res.L$hessian)
res.L$hessian
fisher_info = solve(res.L$hessian)
fisher_info
fisher_info = solve(-res.L$hessian)
fisher_info
sqrt(diag(fisher_info))
res.L = optim(c(70,20,0,0),log.like,method = "L-BFGS-B",hessian = T)
round(res.L$par,3)
res.L$hessian
fisher_info = solve(-res.L$hessian)
fisher_info
sigma = diag(sqrt(diag(fisher_info))
sigma = diag(sqrt(diag(fisher_info)))
sigma = diag(sqrt(diag(fisher_info)))
sigma
diag(sqrt(diag(fisher_info)))
sigma = diag(sigma)
sigma
sigma = sigma[4]
res.L$par[4]
res.L$par
up = res.L$par[4] +1.96*sigma
up
low = res.L$par[4] -1.96*sigma
low
up = res.L$par[4] +1.96*(sigma/length(ftwt))
low = res.L$par[4] -1.96*(sigma/length(ftwt))
ftwt = faithful$waiting
up = res.L$par[4] +1.96*(sigma/length(ftwt))
low = res.L$par[4] -1.96*(sigma/length(ftwt))
up
low
low = res.L$par[4] -1.96*(sigma/sqrt(length(ftwt)))
up = res.L$par[4] +1.96*(sigma/sqrt(length(ftwt)))
sigma = sqrt(diag(fisher_info))
sigma = diag(sigma)
sigma = sigma[4]
ftwt = faithful$waiting
up = res.L$par[4] +1.96*(sigma/sqrt(length(ftwt)))
low = res.L$par[4] -1.96*(sigma/sqrt(length(ftwt)))
fisher_info = solve(-res.L$hessian)
fisher_info
sigma = sqrt(diag(fisher_info))
sigma = diag(sigma)
sigma = sigma[4]
ftwt = faithful$waiting
up = res.L$par[4] +1.96*(sigma/sqrt(length(ftwt)))
low = res.L$par[4] -1.96*(sigma/sqrt(length(ftwt)))
round(res.L$par,3)
ibrary(pracma)
log.like = function(theta){
eps = theta[1]
sig = theta[2]
alpha = theta[3]
beta = theta[4]
ftwt = faithful$waiting
-(-length(ftwt)/2 *log(pi*2*sig^2)+((-1/(2*sig^2))*sum((ftwt-eps)^2))+sum(log(1+erf((alpha*(ftwt-eps)/sig+beta*(ftwt-eps)^3/sig^3))/(sig*sqrt(2)))))
}
res.L = optim(c(70,20,0,0),log.like,method = "L-BFGS-B",hessian = T)
round(res.L$par,3)
res.L$hessian
fisher_info = solve(-res.L$hessian)
fisher_info
sigma = sqrt(diag(fisher_info))
sigma = diag(sigma)
sigma = sigma[4]
ftwt = faithful$waiting
up = res.L$par[4] +1.96*(sigma/sqrt(length(ftwt)))
low = res.L$par[4] -1.96*(sigma/sqrt(length(ftwt)))
sigma = sqrt(diag(fisher_info))
sigma
sigma = diag(sigma)
sigma
sigma = diag(sigma)
sigma
sigma = sigma[4]
sigma
ftwt = faithful$waiting
up = res.L$par[4] +1.96*(sigma/sqrt(length(ftwt)))
low = res.L$par[4] -1.96*(sigma/sqrt(length(ftwt)))
c(low,sigma,up)
c(low,res.L$par[1],up)
c(low,res.L$par[4],up)
# Environment cleaning and seeding setting
rm(list=ls())
set.seed(140)
## Data loading
w_red <- read_delim("winequality-red.csv", ";", escape_double = FALSE, trim_ws = TRUE)
# Environment cleaning and seeding setting
rm(list=ls())
set.seed(140)
setwd("C:/Users/jaman/Documents/GitHub/jm-learning/data-science-cyo/data")
## Data loading
w_red <- read_delim("winequality-red.csv", ";", escape_double = FALSE, trim_ws = TRUE)
## Creating partition
index = createDataPartition(w_red$quality,times=1,p=0.75, list = F)
w_red_train = w_red[index,]
library(tidyverse)
library(caret)
library(e1071)
library(corrplot)
# Environment cleaning and seeding setting
rm(list=ls())
set.seed(140)
setwd("C:/Users/jaman/Documents/GitHub/jm-learning/data-science-cyo/data")
## Data loading
w_red <- read_delim("winequality-red.csv", ";", escape_double = FALSE, trim_ws = TRUE)
## Creating partition
index = createDataPartition(w_red$quality,times=1,p=0.75, list = F)
w_red_train = w_red[index,]
w_red_test = w_red[-index,]
# Summarizing information
w_red_train %>% group_by(quality) %>% summarise(count=n(),fsd = mean(`free sulfur dioxide`),tsd = mean(`total sulfur dioxide`),d=mean(density),ca=mean(`citric acid`))
m = cor(w_red_train[,1:12])
corrplot(m,method="number",type="upper")
cv = trainControl(method='repeatedcv',number = 4,repeats=2)
rf = train(quality~ `citric acid` + `volatile acidity` + `alcohol` + `sulphates` + `density`, w_red_train,method='rf',tuneLength=5,trControl=cv)
ggplot(rf,highlight = TRUE)
rf_pr = predict(rf, newdata = w_red_test)
RMSE <- function(true_ratings,predicted_ratings){sqrt(mean((true_ratings - predicted_ratings)^2))}
RMSE(rf_pr, w_red_test$quality)
knn = train(quality~`citric acid` + `volatile acidity` + `alcohol` + `sulphates` + `density`, w_red_train,method='knn')
knn_pr = predict(knn,newdata=w_red_test)
RMSE(knn_pr, w_red_test$quality)
plot(rf)
getTree(rf)
library(randomForest)
plot(rf)
varImpPlot(rf)
rf2 = randomForest(quality~ `citric acid` + `volatile acidity` + `alcohol` + `sulphates` + `density`, w_red_train)
rf2 = randomForest(quality~ `citric acid` + `volatile acidity` + `alcohol` + `sulphates` + `density`, data=w_red_train)
rf2 = randomForest(quality ~ `citric acid` + `volatile acidity` + `alcohol` + `sulphates` + `density`, data=w_red_train)
rf2 = randomForest(quality ~ ., data=w_red_train)
rf2 = randomForest(quality ~ ., data=w_red_train)
rf2 = randomForest(quality ~ `citric acid` + `volatile acidity` + `alcohol` + `sulphates` + `density`, data=w_red_train)
w_red_train %>% ggplot()+geom_point(aes(`citric acid`,quality))
rf2 = randomForest(quality ~ `citric acid` + `volatile acidity` + `alcohol` + `sulphates` + `density`, data=w_red_train)
rf2 = randomForest(quality ~  `volatile acidity` + `alcohol` + `sulphates` + `density`, data=w_red_train)
rf2 = randomForest(quality ~  , data=w_red_train)
rf2 = randomForest(quality ~  ., data=w_red_train)
varImpPlot(rf$finalModel)
plot(rf$finalModel)
text(rf$finalModel)
plot(rf$finalModel$param)
plot(rf$finalModel$forest)
plot(rf$finalModel$ntree)
plot(rf$finalModel$param)
# Summarizing information
w_red_train %>% group_by(quality) %>% summarise(count=n(),fsd = mean(`free sulfur dioxide`),tsd = mean(`total sulfur dioxide`),d=mean(density),ca=mean(`citric acid`))
m = cor(w_red_train[,1:12])
corrplot(m,method="number",type="upper")
w_red_train %>% ggplot()+geom_point(aes(`citric acid`,quality))
w_red_train %>% ggplot()+geom_point(aes(`alcohol`,quality))
# Summarizing information
w_red_train %>% group_by(quality) %>% summarise(count=n(),fsd = mean(`free sulfur dioxide`),tsd = mean(`total sulfur dioxide`),d=mean(density),ca=mean(`citric acid`))
plot(rf$finalModel$forest)
plot(rf$finalModel$forest$xlevels)
ggplot(rf$finalModel$forest)
ggplot(fortify(rf$finalModel$forest))
install.packages("rattle")
library(rattle)
fancyRpartPlot(rf$finalModel)
cart = train(quality~ `citric acid` + `volatile acidity` + `alcohol` + `sulphates` + `density`, w_red_train,method='rpart',tuneLength=4,trControl=cv)
cart = train(quality~ `citric acid` + `volatile acidity` + `alcohol` + `sulphates` + `density`, w_red_train,method='rpart',tuneLength=4,trControl=cv)
rf = train(quality~ `citric acid` + `volatile acidity` + `alcohol` + `sulphates` + `density`, w_red_train,method='rf',tuneLength=4,trControl=cv)
cartmodel = train(quality~ `citric acid` + `volatile acidity` + `alcohol` + `sulphates` + `density`, w_red_train,method='rpart',tuneLength=4,trControl=cv)
cartmodel = train(quality~ `citric acid` + `volatile acidity` + `alcohol` + `sulphates` + `density`, w_red_train,method='rpart',tuneLength=4)
cartmodel = train(quality~ `citric acid` + `volatile acidity` + `alcohol` + `sulphates` + `density`, w_red_train,method='rpart',trControl=cv)
cartmodel = train(quality~ `citric acid` + `volatile acidity` + `alcohol` + `sulphates` + `density`, w_red_train,method='rpart')
cartmodel = train(quality~., w_red_train,method='rpart')
cartmodel = train(quality~., data=w_red_train,method='rpart')
cartmodel = train(,, data=w_red_train,method='rpart')
cartmodel = train(., data=w_red_train,method='rpart')
cartmodel = train(quality, data=w_red_train,method='rpart')
RMSE(rf_pr, w_red_test$quality)
cartmodel = train(quality, data=w_red_train,method='rpart')
cartmodel = train(quality ~ `citric acid` + `volatile acidity` + `alcohol` + `sulphates` + `density`, data=w_red_train,method='rpart')
colnames(w_red) <- make.names(colnames(w_red))
## Creating partition
index = createDataPartition(w_red$quality,times=1,p=0.75, list = F)
w_red_train = w_red[index,]
w_red_test = w_red[-index,]
# Summarizing information
w_red_train %>% group_by(quality) %>% summarise(count=n(),fsd = mean(`free sulfur dioxide`),tsd = mean(`total sulfur dioxide`),d=mean(density),ca=mean(`citric acid`))
# Summarizing information
w_red_train %>% group_by(quality) %>% summarise(count=n(),fsd = mean(free.sulfur.dioxide),tsd = mean(total.sulfur.dioxide),d=mean(density),ca=mean(citric.acid))
m = cor(w_red_train[,1:12])
corrplot(m,method="number",type="upper")
w_red_train %>% ggplot()+geom_point(aes(`alcohol`,quality))
w_red_train
cv = trainControl(method='repeatedcv',number = 4,repeats=2)
cartmodel = train(quality ~ citric.acid + volatile.acidity + alcohol + sulphates + density, data=w_red_train,method='rpart')
cart_pr = predict(cartmodel,newdata = w_red_test)
RMSE(cary_pr, w_red_test$quality)
RMSE(cary_pr, w_red_test$quality)
RMSE(cart_pr, w_red_test$quality)
cartmodel = train(quality ~ citric.acid + volatile.acidity + alcohol + sulphates + density, tuneLength=4,trControl=cv, data=w_red_train,method='rpart')
cart_pr = predict(cartmodel,newdata = w_red_test)
RMSE(cart_pr, w_red_test$quality)
plot(cartmodel)
plot(cartmodel$finalModel)
text(cartmodel$finalModel)
cartmodel = train(quality ~ citric.acid + volatile.acidity + alcohol + sulphates + density,trControl=cv, data=w_red_train,method='rpart')
cart_pr = predict(cartmodel,newdata = w_red_test)
RMSE(cart_pr, w_red_test$quality)
plot(cartmodel$finalModel)
text(cartmodel$finalModel)
cartmodel = train(quality ~ citric.acid + volatile.acidity + alcohol + sulphates + density, tuneLength=4,trControl=cv, data=w_red_train,method='rpart')
cart_pr = predict(cartmodel,newdata = w_red_test)
RMSE(cart_pr, w_red_test$quality)
plot(cartmodel$finalModel)
text(cartmodel$finalModel)
knn = train(quality~citric.acid + volatile.acidity + alcohol + sulphates + density, w_red_train,method='knn')
knn_pr = predict(knn,newdata=w_red_test)
RMSE(knn_pr, w_red_test$quality)
cv = trainControl(method='repeatedcv',number = 4,repeats=2)
rf = train(quality~ citric.acid + volatile.acidity + alcohol + sulphates + density, w_red_train,method='rf',tuneLength=4,trControl=cv)
ggplot(rf,highlight = TRUE)
rf_pr = predict(rf, newdata = w_red_test)
RMSE(rf_pr, w_red_test$quality)
rf = train(quality~ citric.acid + volatile.acidity + alcohol + sulphates + density, w_red_train,method='rf',tuneLength=5,trControl=cv)
ggplot(rf,highlight = TRUE)
rf_pr = predict(rf, newdata = w_red_test)
RMSE(rf_pr, w_red_test$quality)
# Library Load
library(tidyverse)
library(caret)
library(e1071)
library(corrplot)
# Environment cleaning and seeding setting
rm(list=ls())
set.seed(140)
setwd("C:/Users/jaman/Documents/GitHub/jm-learning/data-science-cyo/data")
## Data loading
w_red <- read_delim("winequality-red.csv", ";", escape_double = FALSE, trim_ws = TRUE)
colnames(w_red) <- make.names(colnames(w_red))
## Creating partition
index = createDataPartition(w_red$quality,times=1,p=0.75, list = F)
w_red_train = w_red[index,]
w_red_test = w_red[-index,]
# Exploratory Data Analysis
# Summarizing information
w_red_train %>% group_by(quality) %>% summarise(count=n(),fsd = mean(free.sulfur.dioxide),tsd = mean(total.sulfur.dioxide),d=mean(density),ca=mean(citric.acid))
# Understanding relationships between variables
m = cor(w_red_train[,1:12])
corrplot(m,method="number",type="upper")
## Understanding the database
# Quality count
w_red_train %>% ggplot()+geom_point(aes(`alcohol`,quality))
RMSE <- function(true_ratings,predicted_ratings){sqrt(mean((true_ratings - predicted_ratings)^2))}
# CART Model
cartmodel = train(quality ~ citric.acid + volatile.acidity + alcohol + sulphates + density, tuneLength=4,trControl=cv, data=w_red_train,method='rpart')
cart_pr = predict(cartmodel,newdata = w_red_test)
RMSE(cart_pr, w_red_test$quality)
plot(cartmodel$finalModel)
text(cartmodel$finalModel)
# KNN
knn = train(quality~citric.acid + volatile.acidity + alcohol + sulphates + density, w_red_train,method='knn')
knn_pr = predict(knn,newdata=w_red_test)
RMSE(knn_pr, w_red_test$quality)
# Random Forest
cv = trainControl(method='repeatedcv',number = 4,repeats=2)
rf = train(quality~ citric.acid + volatile.acidity + alcohol + sulphates + density, w_red_train,method='rf',tuneLength=5,trControl=cv)
ggplot(rf,highlight = TRUE)
rf_pr = predict(rf, newdata = w_red_test)
RMSE(rf_pr, w_red_test$quality)
## Understanding our final model
varImpPlot(rf$finalModel)
knitr::opts_chunk$set(echo = TRUE)
# Library Load
library(tidyverse)
# Exploratory Data Analysis
glimpse(w_red_train)
summary(w_red_train)
w_red_train %>% group_by(quality) %>% summarise(count=n(),fsd = mean(free.sulfur.dioxide),tsd = mean(total.sulfur.dioxide),d=mean(density),ca=mean(citric.acid))
m = cor(w_red_train[,1:12])
corrplot(m,method="number",type="upper")
(rf$finalModel)
varImpPlot(rf$finalModel)
plot(cartmodel$finalModel)
text(cartmodel$finalModel)
cartmodel = train(quality ~ citric.acid + volatile.acidity + alcohol + sulphates + density, tuneLength=4,trControl=cv, data=w_red_train,method='rpart')
cart_pr = predict(cartmodel,newdata = w_red_test)
RMSE(cart_pr, w_red_test$quality)
plot(cartmodel$finalModel)
text(cartmodel$finalModel)
plot(knn$finalModel)
plot(knn)
knn$bestTune
